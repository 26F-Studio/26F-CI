name: "Build macOS portable"
description: "build macOS dmg file"
inputs:
  sourceDir:
    required: true
    description: "Root folder of the sources"
  appName:
    required: true
    description: "App name"
  buildType:
    required: true
    description: "Build type"
  versionString:
    required: true
    description: "Version string of the product"
  versionCode:
    required: true
    description: "Version code of the product"
  output:
    required: true
    description: "Output path and name of the product"
  APPLE_ACCOUNT_PASSWORD:
    required: true
    description: "App Store Connect account password"
  APPLE_ACCOUNT_USERNAME:
    required: true
    description: "App Store Connect account username"
  APPLE_CERT_DEVELOPER_ID_APPLICATION:
    required: true
    description: "Developer ID Application certificate"
  APPLE_CERT_DEVELOPER_ID_APPLICATION_PWD:
    required: true
    description: "Developer ID Application certificate password"
  APPLE_PP_DEVELOPER_ID_APPLICATION:
    required: true
    description: "Developer ID Application provisioning profile"

runs:
  using: "composite"
  steps:
    - name: Process app name
      id: process-app-name
      shell: python3 {0}
      run: |
        import os
        import re
        os.system('echo ::set-output name=bundle-id::org.26f-studio.' + re.sub(r'[^A-Za-z0-9]+', '-', '${{ inputs.appName }}'))
        os.system('echo ::set-output name=product-name::' + re.sub(r'[^A-Za-z0-9]+', '_', '${{ inputs.appName }}'))
    - name: Hide provisioning profile
      env:
        PROVISIONING_PROFILE: ${{ inputs.APPLE_PP_DEVELOPER_ID_APPLICATION }}
      shell: bash
      run: |
        echo "::add-mask::$PROVISIONING_PROFILE"
    - name: Clone love
      shell: bash
      run: |
        git clone --recurse-submodules https://github.com/love2d/love -b 11.4 --depth 1 --shallow-submodules
    - name: Download framework SDK
      uses: ./.github/actions/get-unzip
      with:
        url: https://github.com/love2d/love/releases/download/11.4/love-11.4-apple-libraries.zip
    - name: Move SDK and love package
      shell: bash
      run: |
        mv ./love-apple-dependencies/macOS/Frameworks/ ./love/platform/xcode/macosx
        mv ./love-apple-dependencies/iOS/libraries/ ./love/platform/xcode/ios
        mv ./target.love ./love/platform/xcode/
        mkdir -p ./love/platform/xcode/build/Debug
        mkdir -p ./love/platform/xcode/build/Release
    - name: Process icons
      shell: bash
      run: |
        rm -rf ./love/platform/xcode/Images.xcassets/OS\ X\ AppIcon.appiconset/*.png
        iconutil -c iconset -o ./icon.iconset ${{ inputs.sourceDir }}/.github/build/macos/${{ inputs.buildType }}/icon.icns
        mv -f ./icon.iconset/* ./love/platform/xcode/Images.xcassets/OS\ X\ AppIcon.appiconset/
    - name: Modify XCode project
      shell: bash
      run: |
        npm i plist xcode

        cat <<EOT >> temp.js
        const fs = require('fs');
        const plist = require('plist');
        const xcode = require('xcode');

        const pbxprojPath = './love/platform/xcode/love.xcodeproj/project.pbxproj';
        const project = xcode.project(pbxprojPath).parseSync();
        project.updateBuildProperty('CODE_SIGN_IDENTITY', '"Developer ID Application"', 'Distribution', 'love-macosx')
        project.updateBuildProperty('MACOSX_DEPLOYMENT_TARGET', '10.9', 'Distribution', 'love-macosx')
        project.updateBuildProperty('MARKETING_VERSION', '${{ inputs.versionString }}', 'Distribution', 'love-macosx')
        project.updateBuildProperty('PRODUCT_BUNDLE_IDENTIFIER', '${{ steps.process-app-name.outputs.bundle-id }}', 'Distribution', 'love-macosx')
        project.updateBuildProperty('PRODUCT_NAME', '${{ steps.process-app-name.outputs.product-name }}', 'Distribution', 'love-macosx')
        const resourcesGroupKey = project.findPBXGroupKey({name: 'Resources'});
        const targetKey = project.findTargetKey('"love-macosx"')
        project.addResourceFile('./target.love', {target: targetKey}, resourcesGroupKey);
        fs.writeFileSync(pbxprojPath, project.writeSync());

        const plistPath = './love/platform/xcode/macosx/love-macosx.plist';
        const parsed = plist['parse'](fs.readFileSync(plistPath, 'utf8'));
        parsed['CFBundleExecutable'] = '${{ steps.process-app-name.outputs.product-name }}';
        parsed['CFBundleName'] = '${{ inputs.appName }}';
        parsed['NSHumanReadableCopyright'] = 'Copyright Â© 2019-' + new Date().getFullYear() + ' 26F-Studio. Some Rights Reserved.';
        delete parsed['CFBundleDocumentTypes'];
        delete parsed['UTExportedTypeDeclarations'];
        fs.writeFileSync(plistPath, plist['build'](parsed));

        const exportPlistPath = './love/platform/xcode/macosx/macos-copy-app.plist';
        const exportPlist = plist['parse'](fs.readFileSync(exportPlistPath, 'utf8'));
        exportPlist['method'] = 'developer-id';
        // exportPlist['signingCertificate'] = 'Developer ID Application';
        fs.writeFileSync(exportPlistPath, plist['build'](exportPlist));

        const iconPath = './love/platform/xcode/Images.xcassets/OS X AppIcon.appiconset/Contents.json';
        const iconContents = JSON.parse(fs.readFileSync(iconPath, 'utf8'));
        iconContents.images.forEach(image => {
            image.filename = 'icon_' + image.size + (image.scale === '2x' ? '@2x' : '') + '.png';
        });
        fs.writeFileSync(iconPath, JSON.stringify(iconContents));

        console.info('Project info updated.');
        EOT

        node temp.js
    - name: Create keychain, import certificate and provisioning profile
      env:
        CERTIFICATE_FILENAME: developerID_application.p12
        KEYCHAIN_FILENAME: CI.keychain
        KEYCHAIN_PASSWORD: 26F-Studio-CI
        PROVISIONING_PROFILE_FILENAME: developerID_application.provisionprofile
      shell: bash
      run: |
        echo "${{ inputs.APPLE_CERT_DEVELOPER_ID_APPLICATION }}" | base64 --decode > $CERTIFICATE_FILENAME
        security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_FILENAME
        security default-keychain -s $KEYCHAIN_FILENAME
        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_FILENAME
        security import $CERTIFICATE_FILENAME -k $KEYCHAIN_FILENAME -P "${{ inputs.APPLE_CERT_DEVELOPER_ID_APPLICATION_PWD }}" -T /usr/bin/codesign
        security find-identity -v
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_FILENAME

        echo "${{ inputs.APPLE_CERT_DEVELOPER_ID_APPLICATION }}" | base64 --decode > $PROVISIONING_PROFILE_FILENAME
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PROVISIONING_PROFILE_FILENAME ~/Library/MobileDevice/Provisioning\ Profiles
    - name: Build MacOS app
      env:
        KEYCHAIN_FILENAME: CI.keychain
        KEYCHAIN_PASSWORD: 26F-Studio-CI
      shell: bash
      run: |
        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_FILENAME

        xcodebuild clean archive -quiet \
        -project ./love/platform/xcode/love.xcodeproj \
        -scheme love-macosx \
        -configuration Distribution \
        -archivePath ./archive.xcarchive \
        OTHER_CFLAGS="-Wno-unused-parameter -Wno-sign-compare -Wno-conditional-uninitialized -Wno-strict-prototypes" \
        PROVISIONING_PROFILE_SPECIFIER="Developer ID Application (Techmino-Galaxy)"

        xcodebuild -exportArchive \
        -archivePath ./archive.xcarchive \
        -exportPath ./ \
        -exportOptionsPlist ./love/platform/xcode/macosx/macos-copy-app.plist
    - name: Codesign application bundle
      env:
        KEYCHAIN_FILENAME: CI.keychain
        KEYCHAIN_PASSWORD: 26F-Studio-CI
      shell: bash
      run: |
        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_FILENAME
        [[ $(security find-identity -v) =~ ([0-9A-F]{40}) ]]
        codesign --deep \
        --entitlements ./love/platform/xcode/love.entitlements \
        --force --strict --timestamp \
        --options runtime \
        -s ${BASH_REMATCH[1]} \
        ./${{ steps.process-app-name.outputs.product-name }}.app -v
    - name: Notarize application bundle
      uses: GuillaumeFalourd/xcode-notarize@v1
      with:
        product-path: ./${{ steps.process-app-name.outputs.product-name }}.app
        primary-bundle-id: ${{ steps.process-app-name.outputs.bundle-id }}
        appstore-connect-username: ${{ inputs.APPLE_ACCOUNT_USERNAME }}
        appstore-connect-password: ${{ inputs.APPLE_ACCOUNT_PASSWORD }}
    - name: Create dmg file
      shell: bash
      run: |
        brew install create-dmg
        create-dmg \
        --app-drop-link 736 315 \
        --background "${{ inputs.sourceDir }}/.github/build/macos/${{ inputs.buildType }}/dmg.png" \
        --hide-extension "${{ steps.process-app-name.outputs.product-name }}.app" \
        --icon "${{ steps.process-app-name.outputs.product-name }}.app" 289 315 \
        --icon-size 128 \
        --text-size 12 \
        --volicon "${{ inputs.sourceDir }}/.github/build/macos/${{ inputs.buildType }}/dmg.icns" \
        --volname "${{ steps.process-app-name.outputs.product-name }}" \
        --window-pos 200 120 \
        --window-size 1024 604 \
        "${{ inputs.output }}" \
        "${{ steps.process-app-name.outputs.product-name }}.app"
    - name: Codesign dmg file
      env:
        KEYCHAIN_FILENAME: CI.keychain
        KEYCHAIN_PASSWORD: 26F-Studio-CI
      shell: bash
      run: |
        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_FILENAME
        [[ $(security find-identity -v) =~ ([0-9A-F]{40}) ]]
        codesign --deep \
        --entitlements ./love/platform/xcode/love.entitlements \
        --force --strict --timestamp \
        --options runtime \
        -s ${BASH_REMATCH[1]} \
        ./${{ inputs.output }} -v
    - name: Notarize dmg file
      uses: GuillaumeFalourd/xcode-notarize@v1
      with:
        product-path: ./${{ inputs.output }}
        primary-bundle-id: ${{ steps.process-app-name.outputs.bundle-id }}
        appstore-connect-username: ${{ inputs.APPLE_ACCOUNT_USERNAME }}
        appstore-connect-password: ${{ inputs.APPLE_ACCOUNT_PASSWORD }}
    - name: Staple dmg file
      uses: devbotsxyz/xcode-staple@v1
      with:
        product-path: ./${{ inputs.output }}
    - name: Finalize
      shell: bash
      run: |
        spctl -a -t open --context context:primary-signature -vv ./${{ inputs.output }}
