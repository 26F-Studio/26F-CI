name: "26F Studio Development CI"

on:
  workflow_dispatch:
    inputs:
      repository:
        description: "Target repository (Owner/Repo)"
        required: true
      ref:
        description: "The branch, tag or SHA to checkout"
        required: false
        default: ""
      appName:
        description: "App name (Would be used in description files)"
        required: false
        default: "Love_App"
      buildType:
        description: "Build type (Would be used by accessing assets)"
        required: true
      buildList:
        description: "List of folders and files to be built (seperate by spaces)"
        required: false
        default: "./*"
      packageName:
        description: "Base name of the package"
        required: false
        default: "Love_App"
      versionName:
        description: "Custom name for the version"
        required: false
        default: "V0.0.1"
      versionString:
        description: "Version string (looks like 1.2.3)"
        required: false
        default: "0.0.1"
      versionCode:
        description: "Version code (looks like 123)"
        required: false
        default: "1"

env:
  SOURCE_DIR: ./src/

jobs:
  check-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Display inputs
        run: |
          echo repository: ${{ github.event.inputs.repository }}
          echo ref: ${{ github.event.inputs.ref }}
          echo appName: ${{ github.event.inputs.appName }}
          echo buildType: ${{ github.event.inputs.buildType }}
          echo buildList: ${{ github.event.inputs.buildList }}
          echo packageName: ${{ github.event.inputs.packageName }}
          echo versionName: ${{ github.event.inputs.versionName }}
          echo versionString: ${{ github.event.inputs.versionString }}
          echo versionCode: ${{ github.event.inputs.versionCode }}

  auto-test:
    runs-on: ubuntu-latest
    needs: check-inputs
    steps:
      - name: Initialize CI
        uses: actions/checkout@v3
      - name: Clone target repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
          submodules: "recursive"
          path: ${{ env.SOURCE_DIR }}
      - name: Run auto tests
        uses: ./.github/actions/auto-test
        with:
          sourceDir: ${{ env.SOURCE_DIR }}

  build-windows:
    runs-on: windows-latest
    needs: check-inputs
    env:
      PACKAGE_NAME: ./${{ github.event.inputs.package_name }}_Windows.zip
    outputs:
      download_url: ${{ steps.transfer.outputs.download_url }}
    steps:
      - name: Initialize CI
        uses: actions/checkout@v3
      - name: Clone target repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
          submodules: "recursive"
          path: ${{ env.SOURCE_DIR }}
      - name: Cache love package
        id: cache-love-package
        uses: actions/cache@v3
        with:
          path: ./target.love
          key: ${{ github.event.inputs.packageName }}_Cache
      - name: Check cache status
        run: |
          echo "${{ steps.cache-love-package.outputs.cache-hit }}"
      - if: ${{ steps.cache-love-package.outputs.cache-hit }} != 'true'
        name: Build love package
        uses: ./.github/actions/build-bare
        with:
          sourceDir: ${{ env.SOURCE_DIR }}
          buildList: ${{ github.event.inputs.buildList }}
      - name: Build Windows package
        uses: ./.github/actions/build-windows
        with:
          sourceDir: ${{ env.SOURCE_DIR }}
          appName: ${{ github.event.inputs.appName }}
          buildType: ${{ github.event.inputs.buildType }}
          versionString: ${{ github.event.inputs.versionString }}
          output: ${{ env.PACKAGE_NAME }}
      - name: Get transfer
        uses: ./.github/actions/get-unzip
        with:
          url: https://github.com/Mikubill/transfer/releases/download/v0.4.17/transfer_0.4.17_windows_amd64.zip
      - name: Upload to WeTransfer
        id: transfer
        run: |
          ./transfer.exe wet -s -p 16 --no-progress ${{ env.PACKAGE_NAME }} 2>&1>./wetransfer.log
          echo "::set-output name=download_url::$(cat ./wetransfer.log | grep https | cut -f3 -d" ")"

  build-linux:
    runs-on: ubuntu-latest
    needs: check-inputs
    env:
      PACKAGE_NAME: ./${{ github.event.inputs.package_name }}_Linux.AppImage
    outputs:
      download_url: ${{ steps.transfer.outputs.download_url }}
    steps:
      - name: Initialize CI
        uses: actions/checkout@v3
      - name: Clone target repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
          submodules: "recursive"
          path: ${{ env.SOURCE_DIR }}
      - name: Cache love package
        id: cache-love-package
        uses: actions/cache@v3
        with:
          path: ./target.love
          key: ${{ github.event.inputs.packageName }}_Cache
      - if: ${{ steps.cache-love-package.outputs.cache-hit }} != 'true'
        name: Build love package
        uses: ./.github/actions/build-bare
        with:
          sourceDir: ${{ env.SOURCE_DIR }}
          buildList: ${{ github.event.inputs.buildList }}
      - name: Build Linux package
        uses: ./.github/actions/build-linux
        with:
          sourceDir: ${{ env.SOURCE_DIR }}
          appName: ${{ github.event.inputs.appName }}
          buildType: ${{ github.event.inputs.buildType }}
          output: ${{ env.PACKAGE_NAME }}
      - name: Upload to WeTransfer
        id: transfer
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${{ env.PACKAGE_NAME }} 2>&1>./wetransfer.log
          echo "::set-output name=download_url::$(cat ./wetransfer.log | grep https | cut -f3 -d" ")"

  # build-android:
  #   runs-on: ubuntu-latest
  #   needs: get-info
  #   env:
  #     PACKAGE_NAME: ./Techmino_Galaxy_${{ needs.get-info.outputs.name }}_${{ needs.get-info.outputs.commit }}_#${{ GITHUB.RUN_NUMBER }}_Android.apk
  #   outputs:
  #     download_url: ${{ steps.transfer.outputs.download_url }}
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: "recursive"
  #     - uses: ./.github/actions/build-android
  #       with:
  #         type: snapshot
  #         apkCode: ${{ needs.get-info.outputs.apkCode }}
  #         name: ${{ needs.get-info.outputs.name }}
  #         output: ${{ env.PACKAGE_NAME }}

  #         ANDROID_KEYSTORE_ALIAS: ${{ secrets.ANDROID_KEYSTORE_ALIAS }}
  #         ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
  #         ANDROID_KEYSTORE_KEYPASSWORD: ${{ secrets.ANDROID_KEYSTORE_KEYPASSWORD }}
  #         ANDROID_KEYSTORE_STOREPASSWORD: ${{ secrets.ANDROID_KEYSTORE_STOREPASSWORD }}
  #     - name: Upload to WeTransfer
  #       id: transfer
  #       run: |
  #         curl -fsSL git.io/file-transfer | sh
  #         ./transfer wet -s -p 16 --no-progress ${{ env.PACKAGE_NAME }} 2>&1>./wetransfer.log
  #         echo "::set-output name=download_url::$(cat ./wetransfer.log | grep https | cut -f3 -d" ")"

  # build-macOS:
  #   runs-on: macos-latest
  #   needs: get-info
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: 'recursive'
  #   - uses: ./.github/actions/update-version
  #     with:
  #       commit: ${{ needs.get-info.outputs.commit }}
  #       type: snapshot
  #   - uses: ./.github/actions/build-macos
  #     with:
  #       name: ${{ needs.get-info.outputs.name }}
  #       icon: .github/build/macOS/icon_snapshot.icns
  #       APPLE_API_ID: '${{ secrets.APPLE_API_ID }}'
  #       APPLE_API_ISSUER: '${{ secrets.APPLE_API_ISSUER }}'
  #       APPLE_API_KEY: '${{ secrets.APPLE_API_KEY }}'
  #       APPLE_APP_IDENTIFIER: '${{ secrets.APPLE_APP_IDENTIFIER }}'
  #       APPLE_KEYCHAIN_NAME: '${{ secrets.APPLE_KEYCHAIN_NAME }}'
  #       APPLE_KEYCHAIN_PWD: '${{ secrets.APPLE_KEYCHAIN_PWD }}'
  #       FASTLANE_MATCH_PWD: '${{ secrets.FASTLANE_MATCH_PWD }}'
  #       FASTLANE_MATCH_TOKEN: '${{ secrets.FASTLANE_MATCH_TOKEN }}'
  #   - name: Upload
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: Techmino_${{ needs.get-info.outputs.name }}_${{ needs.get-info.outputs.commit }}_#${{ GITHUB.RUN_NUMBER }}_macOS
  #       path: Techmino.dmg

  # build-iOS:
  #   runs-on: macos-latest
  #   if: (!startsWith( github.ref , 'refs/heads/ci-')) || startsWith( github.ref , 'refs/heads/ci-ios-')
  #   needs: get-info
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: 'recursive'
  #   - uses: ./.github/actions/update-version
  #     with:
  #       commit: ${{ needs.get-info.outputs.commit }}
  #       type: snapshot
  #   - uses: ./.github/actions/build-ios
  #     with:
  #       name: ${{ needs.get-info.outputs.name }}
  #       type: 'dev'
  #       APPLE_API_ID: '${{ secrets.APPLE_API_ID }}'
  #       APPLE_API_ISSUER: '${{ secrets.APPLE_API_ISSUER }}'
  #       APPLE_API_KEY: '${{ secrets.APPLE_API_KEY }}'
  #       APPLE_APP_BUILD: '${{ needs.get-info.outputs.code }}.2.${{ github.run_number }}.${{ github.run_attempt }}'
  #       APPLE_APP_CHANGELOG: '${{ github.event.commits[0].message }}'
  #       APPLE_APP_ID: '${{ secrets.APPLE_APP_ID }}'
  #       APPLE_APP_IDENTIFIER: '${{ secrets.APPLE_APP_IDENTIFIER }}'
  #       APPLE_APP_PROFILE: '${{ secrets.APPLE_APP_PROFILE }}'
  #       APPLE_KEYCHAIN_NAME: '${{ secrets.APPLE_KEYCHAIN_NAME }}'
  #       APPLE_KEYCHAIN_PWD: '${{ secrets.APPLE_KEYCHAIN_PWD }}'
  #       FASTLANE_ACTION_ID: '${{ github.run_id }}'
  #       FASTLANE_DISCORD_WEBHOOK: '${{ secrets.FASTLANE_DISCORD_WEBHOOK }}'
  #       FASTLANE_MATCH_PWD: '${{ secrets.FASTLANE_MATCH_PWD }}'
  #       FASTLANE_MATCH_TOKEN: '${{ secrets.FASTLANE_MATCH_TOKEN }}'
  #   - name: Upload
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: Techmino_${{ needs.get-info.outputs.name }}_${{ needs.get-info.outputs.commit }}_#${{ GITHUB.RUN_NUMBER }}_iOS
  #       path: Techmino.ipa

  # build-love:
  #   runs-on: ubuntu-latest
  #   needs: get-info
  #   env:
  #     PACKAGE_NAME: ./Techmino_Galaxy_${{ needs.get-info.outputs.name }}_${{ needs.get-info.outputs.commit }}_#${{ GITHUB.RUN_NUMBER }}_Bare.love
  #   outputs:
  #     download_url: ${{ steps.transfer.outputs.download_url }}
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: "recursive"
  #     - uses: ./.github/actions/build-love
  #       with:
  #         output: ${{ env.PACKAGE_NAME }}
  #     - name: Upload to WeTransfer
  #       id: transfer
  #       run: |
  #         curl -fsSL git.io/file-transfer | sh
  #         ./transfer wet -s -p 16 --no-progress ${{ env.PACKAGE_NAME }} 2>&1>./wetransfer.log
  #         echo "::set-output name=download_url::$(cat ./wetransfer.log | grep https | cut -f3 -d" ")"

  # discord-report:
  #   runs-on: ubuntu-latest
  #   if: ${{ always() }}
  #   needs:
  #     [get-info, auto-test, build-windows, build-linux, build-android, build-love]
  #   steps:
  #     - name: Discord Message
  #       uses: Sniddl/discord-commits@v1.3
  #       with:
  #         webhook: ${{ secrets.DISCORD_WEBHOOK }}
  #         message: "Github action's result report from **${{ github.repository }}**."
  #         embed: '{"author":{"name":"Techmino Galaxy [Snapshot]","url":"https://github.com/${{ github.repository }}"},"title":"CI #${{ GITHUB.RUN_NUMBER }} Result [Develop]","description":"Here is the result of the CI triggered by commit `${{ needs.get-info.outputs.commit }}`","url":"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}","thumbnail":{"url":"https://raw.githubusercontent.com/26F-Studio/Techmino_Galaxy/main/.github/build/Linux/snapshot.png"},"color":36863,"fields":[{"name":"Version","value":"${{ needs.get-info.outputs.name }}"},{"name":"Changelog","value":"${{ github.event.commits[0].message }}"},{"name":"Status","value":"**Automatic Test:** ${{ needs.automatic-test.result }}\n**Windows:** ${{ needs.build-windows.result }}\n**Linux:** ${{ needs.build-linux.result }}\n**Android:** ${{ needs.build-android.result }}\n**Bare:** ${{ needs.build-love.result }}"},{"name":"Download Links","value":"**Windows:** ${{ needs.build-windows.outputs.download_url }}\n**Linux:** ${{ needs.build-linux.outputs.download_url }}\n**Android:** ${{ needs.build-android.outputs.download_url }}\n**Bare:** ${{ needs.build-love.outputs.download_url}}"}]}'
  # - name: A/B Check
  #   if: ${{ envA }} != ${{ envB }}
  #   uses: actions/github-script@v3
  #   with:
  #     script: |
  #       core.setFailed('envA and envB are not equivalent!')
