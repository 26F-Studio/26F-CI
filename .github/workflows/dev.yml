name: "26F Studio Development CI"

on:
  workflow_dispatch:
    inputs:
      repository:
        description: "Target repository (Owner/Repo)"
        required: true
      ref:
        description: "The branch, tag or SHA to checkout"
        required: false
        default: ""
      appName:
        description: "App name (Would be used in description files)"
        required: false
        default: "Love_App"
      buildType:
        description: "Build type (Would be used by accessing assets)"
        required: true
      buildList:
        description: "List of folders and files to be built (seperate by spaces)"
        required: false
        default: "./*"
      packageName:
        description: "Base name of the package"
        required: false
        default: "Love_App"
      versionName:
        description: "Custom name for the version"
        required: false
        default: "V0.0.1"
      versionString:
        description: "Version string (looks like 1.2.3)"
        required: false
        default: "0.0.1"
      versionCode:
        description: "Version code (looks like 123)"
        required: false
        default: "1"

env:
  SOURCE_DIR: ./src/

jobs:
  check-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Display inputs
        run: |
          DISPLAY_STRING=$(cat << EOF
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
          appName: ${{ github.event.inputs.appName }}
          buildType: ${{ github.event.inputs.buildType }}
          buildList: ${{ github.event.inputs.buildList }}
          packageName: ${{ github.event.inputs.packageName }}
          versionName: ${{ github.event.inputs.versionName }}
          versionString: ${{ github.event.inputs.versionString }}
          versionCode: ${{ github.event.inputs.versionCode }}
          EOF
          )
          DISPLAY_STRING="${DISPLAY_STRING//'%'/'%25'}"
          DISPLAY_STRING="${DISPLAY_STRING//$'\n'/'%0A'}"
          DISPLAY_STRING="${DISPLAY_STRING//$'\r'/'%0D'}"
          echo "::notice::$DISPLAY_STRING"

  auto-test:
    runs-on: ubuntu-latest
    needs: check-inputs
    steps:
      - name: Initialize CI
        uses: actions/checkout@v3
      - name: Clone target repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
          submodules: "recursive"
          path: ${{ env.SOURCE_DIR }}
      - name: Run auto tests
        uses: ./.github/actions/auto-test
        with:
          sourceDir: ${{ env.SOURCE_DIR }}

  build-windows:
    runs-on: windows-latest
    needs: check-inputs
    env:
      PACKAGE_NAME: ./${{ github.event.inputs.packageName }}_Windows.zip
    outputs:
      downloadUrl: ${{ steps.transfer.outputs.downloadUrl }}
    steps:
      - name: Initialize CI
        uses: actions/checkout@v3
      - name: Clone target repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
          submodules: "recursive"
          path: ${{ env.SOURCE_DIR }}
      - name: Cache love package
        id: cache-love
        uses: actions/cache@v2
        with:
          path: ./target.love
          key: love-cache-${{ GITHUB.RUN_NUMBER }}
      - name: Build love package
        if: ${{ steps.cache-love.outputs.cace-hit }} != 'true'
        uses: ./.github/actions/build-bare
        with:
          sourceDir: ${{ env.SOURCE_DIR }}
          buildList: ${{ github.event.inputs.buildList }}
      - name: Build Windows package
        uses: ./.github/actions/build-windows
        with:
          sourceDir: ${{ env.SOURCE_DIR }}
          appName: ${{ github.event.inputs.appName }}
          buildType: ${{ github.event.inputs.buildType }}
          versionString: ${{ github.event.inputs.versionString }}
          output: ${{ env.PACKAGE_NAME }}
      - name: Get transfer
        uses: ./.github/actions/get-unzip
        with:
          url: https://github.com/Mikubill/transfer/releases/download/v0.4.17/transfer_0.4.17_windows_amd64.zip
      - name: Upload to WeTransfer
        id: transfer
        run: |
          ./transfer.exe wet -s -p 16 --no-progress ${{ env.PACKAGE_NAME }} 2>&1>./wetransfer.log
          echo "::set-output name=downloadUrl::$(cat ./wetransfer.log | grep https | cut -f3 -d" ")"

  build-linux:
    runs-on: ubuntu-latest
    needs: check-inputs
    env:
      PACKAGE_NAME: ./${{ github.event.inputs.packageName }}_Linux.AppImage
    outputs:
      downloadUrl: ${{ steps.transfer.outputs.downloadUrl }}
    steps:
      - name: Initialize CI
        uses: actions/checkout@v3
      - name: Clone target repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
          submodules: "recursive"
          path: ${{ env.SOURCE_DIR }}
      - name: Cache love package
        id: cache-love
        uses: actions/cache@v2
        with:
          path: ./target.love
          key: love-cache-${{ GITHUB.RUN_NUMBER }}
      - name: Build love package
        if: ${{ steps.cache-love.outputs.cace-hit }} != 'true'
        uses: ./.github/actions/build-bare
        with:
          sourceDir: ${{ env.SOURCE_DIR }}
          buildList: ${{ github.event.inputs.buildList }}
      - name: Build Linux package
        uses: ./.github/actions/build-linux
        with:
          sourceDir: ${{ env.SOURCE_DIR }}
          appName: ${{ github.event.inputs.appName }}
          buildType: ${{ github.event.inputs.buildType }}
          output: ${{ env.PACKAGE_NAME }}
      - name: Upload to WeTransfer
        id: transfer
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${{ env.PACKAGE_NAME }} 2>&1>./wetransfer.log
          echo "::set-output name=downloadUrl::$(cat ./wetransfer.log | grep https | cut -f3 -d" ")"

  build-android:
    runs-on: ubuntu-latest
    needs: check-inputs
    env:
      PACKAGE_NAME: ./${{ github.event.inputs.packageName }}_Android.apk
    outputs:
      downloadUrl: ${{ steps.transfer.outputs.downloadUrl }}
    steps:
      - name: Initialize CI
        uses: actions/checkout@v3
      - name: Clone target repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
          submodules: "recursive"
          path: ${{ env.SOURCE_DIR }}
      - name: Cache love package
        id: cache-love
        uses: actions/cache@v2
        with:
          path: ./target.love
          key: love-cache-${{ GITHUB.RUN_NUMBER }}
      - name: Build love package
        if: ${{ steps.cache-love.outputs.cace-hit }} != 'true'
        uses: ./.github/actions/build-bare
        with:
          sourceDir: ${{ env.SOURCE_DIR }}
          buildList: ${{ github.event.inputs.buildList }}
      - name: Build Android package
        uses: ./.github/actions/build-android
        with:
          sourceDir: ${{ env.SOURCE_DIR }}
          appName: ${{ github.event.inputs.appName }}
          buildType: ${{ github.event.inputs.buildType }}
          versionString: ${{ github.event.inputs.versionString }}
          versionCode: ${{ github.event.inputs.versionCode }}
          output: ${{ env.PACKAGE_NAME }}
          ANDROID_KEYSTORE_ALIAS: ${{ secrets.ANDROID_KEYSTORE_ALIAS }}
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_KEYPASSWORD: ${{ secrets.ANDROID_KEYSTORE_KEYPASSWORD }}
          ANDROID_KEYSTORE_STOREPASSWORD: ${{ secrets.ANDROID_KEYSTORE_STOREPASSWORD }}
      - name: Upload to WeTransfer
        id: transfer
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${{ env.PACKAGE_NAME }} 2>&1>./wetransfer.log
          echo "::set-output name=downloadUrl::$(cat ./wetransfer.log | grep https | cut -f3 -d" ")"

  # build-macOS:
  #   runs-on: macos-latest
  #   needs: get-info
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: 'recursive'
  #   - uses: ./.github/actions/update-version
  #     with:
  #       commit: ${{ needs.get-info.outputs.commit }}
  #       type: snapshot
  #   - uses: ./.github/actions/build-macos
  #     with:
  #       name: ${{ needs.get-info.outputs.name }}
  #       icon: .github/build/macOS/icon_snapshot.icns
  #       APPLE_API_ID: '${{ secrets.APPLE_API_ID }}'
  #       APPLE_API_ISSUER: '${{ secrets.APPLE_API_ISSUER }}'
  #       APPLE_API_KEY: '${{ secrets.APPLE_API_KEY }}'
  #       APPLE_APP_IDENTIFIER: '${{ secrets.APPLE_APP_IDENTIFIER }}'
  #       APPLE_KEYCHAIN_NAME: '${{ secrets.APPLE_KEYCHAIN_NAME }}'
  #       APPLE_KEYCHAIN_PWD: '${{ secrets.APPLE_KEYCHAIN_PWD }}'
  #       FASTLANE_MATCH_PWD: '${{ secrets.FASTLANE_MATCH_PWD }}'
  #       FASTLANE_MATCH_TOKEN: '${{ secrets.FASTLANE_MATCH_TOKEN }}'
  #   - name: Upload
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: Techmino_${{ needs.get-info.outputs.name }}_${{ needs.get-info.outputs.commit }}_#${{ GITHUB.RUN_NUMBER }}_macOS
  #       path: Techmino.dmg

  # build-iOS:
  #   runs-on: macos-latest
  #   if: (!startsWith( github.ref , 'refs/heads/ci-')) || startsWith( github.ref , 'refs/heads/ci-ios-')
  #   needs: get-info
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: 'recursive'
  #   - uses: ./.github/actions/update-version
  #     with:
  #       commit: ${{ needs.get-info.outputs.commit }}
  #       type: snapshot
  #   - uses: ./.github/actions/build-ios
  #     with:
  #       name: ${{ needs.get-info.outputs.name }}
  #       type: 'dev'
  #       APPLE_API_ID: '${{ secrets.APPLE_API_ID }}'
  #       APPLE_API_ISSUER: '${{ secrets.APPLE_API_ISSUER }}'
  #       APPLE_API_KEY: '${{ secrets.APPLE_API_KEY }}'
  #       APPLE_APP_BUILD: '${{ needs.get-info.outputs.code }}.2.${{ github.run_number }}.${{ github.run_attempt }}'
  #       APPLE_APP_CHANGELOG: '${{ github.event.commits[0].message }}'
  #       APPLE_APP_ID: '${{ secrets.APPLE_APP_ID }}'
  #       APPLE_APP_IDENTIFIER: '${{ secrets.APPLE_APP_IDENTIFIER }}'
  #       APPLE_APP_PROFILE: '${{ secrets.APPLE_APP_PROFILE }}'
  #       APPLE_KEYCHAIN_NAME: '${{ secrets.APPLE_KEYCHAIN_NAME }}'
  #       APPLE_KEYCHAIN_PWD: '${{ secrets.APPLE_KEYCHAIN_PWD }}'
  #       FASTLANE_ACTION_ID: '${{ github.run_id }}'
  #       FASTLANE_DISCORD_WEBHOOK: '${{ secrets.FASTLANE_DISCORD_WEBHOOK }}'
  #       FASTLANE_MATCH_PWD: '${{ secrets.FASTLANE_MATCH_PWD }}'
  #       FASTLANE_MATCH_TOKEN: '${{ secrets.FASTLANE_MATCH_TOKEN }}'
  #   - name: Upload
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: Techmino_${{ needs.get-info.outputs.name }}_${{ needs.get-info.outputs.commit }}_#${{ GITHUB.RUN_NUMBER }}_iOS
  #       path: Techmino.ipa

  build-love:
    runs-on: ubuntu-latest
    needs: check-inputs
    env:
      PACKAGE_NAME: ./${{ github.event.inputs.packageName }}_Bare.love
    outputs:
      downloadUrl: ${{ steps.transfer.outputs.downloadUrl }}
    steps:
      - name: Initialize CI
        uses: actions/checkout@v3
      - name: Clone target repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
          submodules: "recursive"
          path: ${{ env.SOURCE_DIR }}
      - name: Cache love package
        id: cache-love
        uses: actions/cache@v2
        with:
          path: ./target.love
          key: love-cache-${{ GITHUB.RUN_NUMBER }}
      - name: Build love package
        if: ${{ steps.cache-love.outputs.cace-hit }} != 'true'
        uses: ./.github/actions/build-bare
        with:
          sourceDir: ${{ env.SOURCE_DIR }}
          buildList: ${{ github.event.inputs.buildList }}
      - name: Rename love package
        run: |
          mv ./target.love ${{ env.PACKAGE_NAME }}
      - name: Upload to WeTransfer
        id: transfer
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${{ env.PACKAGE_NAME }} 2>&1>./wetransfer.log
          echo "::set-output name=downloadUrl::$(cat ./wetransfer.log | grep https | cut -f3 -d" ")"

  discord-report:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [auto-test, build-windows, build-linux, build-android, build-love]
    steps:
      - name: Discord Message
        uses: Sniddl/discord-commits@v1.3
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          message: "Remote CI result from **${{ github.event.inputs.repository }}**."
          embed: '{
            "author":{
            "name":"${{ github.event.inputs.appName }} [${{ github.event.inputs.buildType }}]",
            "url":"https://github.com/${{ github.event.inputs.repository }}"
            },
            "title":"${{ github.event.inputs.appName }} (${{ github.event.inputs.versionName }}) Build Result",
            "description": "CI requested from ${{ github.event.inputs.repository }}/${{ github.event.inputs.ref }}",
            "url":"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "thumbnail":{
            "url":"https://raw.githubusercontent.com/${{ github.event.inputs.repository }}/${{ github.event.inputs.ref }}/.github/build/linux/${{ github.event.inputs.buildType }}/icon.png"
            },
            "color":36863,
            "fields":[
            {"name":"Version","value":"${{ github.event.inputs.versionString }}","inline": true},
            {"name":"Package Name","value":"${{ github.event.inputs.packageName }}","inline": true},
            {"name":"Status","value":"**Automatic Test:** ${{ needs.auto-test.result }}\n**Windows:** ${{ needs.build-windows.result }}\n**Linux:** ${{ needs.build-linux.result }}\n**Android:** ${{ needs.build-android.result }}\n**Bare:** ${{ needs.build-love.result }}"},
            {"name":"Download Links","value":"**Windows:** ${{ needs.build-windows.outputs.downloadUrl }}\n**Linux:** ${{ needs.build-linux.outputs.downloadUrl }}\n**Android:** ${{ needs.build-android.outputs.downloadUrl }}\n**Bare:** ${{ needs.build-love.outputs.downloadUrl}}"}
            ]
            }'

  # - name: A/B Check
  #   if: ${{ envA }} != ${{ envB }}
  #   uses: actions/github-script@v3
  #   with:
  #     script: |
  #       core.setFailed('envA and envB are not equivalent!')
